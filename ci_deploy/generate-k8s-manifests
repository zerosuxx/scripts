#!/usr/bin/env bash
# version: 2.2.0

set -eo pipefail

function help() {
    echo "Usage: `basename $0` [-h|--help] [-c|--clean] [-o|--output[=]<manifest-file-path>]"
}

function parse_arguments() {
    output_file=""
    cleanup_output_folder=0

    while getopts "co:h-:" option; do
        case "${option}" in
            -)
                case "${OPTARG}" in
                    clean)
                        cleanup_output_folder=1
                        ;;
                    output)
                        output_file="${!OPTIND}";
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    output=*)
                        output_file=${OPTARG#*=}
                        ;;
                    help)
                        help
                        ;;
                esac;;
            c)
                cleanup_output_folder=1
                ;;
            o)
                output_file="${OPTARG}";
                ;;
            h)
                help
                exit
                ;;
            *)
                help
                exit 1
                ;;
        esac
    done
}

function create_kustomization_file() {
    path="$1"
    contents=$(yq e '.resources = []' -n)
    
    for file in ${path}/*; do
        export file_path=$(basename "${file}")
        contents=$(echo "${contents}" | yq e '.resources += [strenv(file_path)]')
    done

    echo "$contents" > "${path}/kustomization.yaml"
}

parse_arguments "$@"
shift $(($OPTIND - 1))

tmp_app_dir="$(mktemp -d)"

for file_content_base64_env in ${!FILE_CONTENT_*}; do
    if [[ "${file_content_base64_env}" =~ _PART[0-9]+_ ]]; then
        file_content_base64_env_without_part=$(echo "${file_content_base64_env}" | sed -e 's/\(.*\)_PART[0-9]\+/\1/g')
        export "${file_content_base64_env_without_part}"+="${!file_content_base64_env}"
        unset "${file_content_base64_env}"
    fi
done

for file_content_base64_env in ${!FILE_CONTENT_*}; do
    file_name="$(echo "${file_content_base64_env:13:-7}" | tr '_' '.' | tr '[:upper:]' '[:lower:]')"
    contents="$(echo "${!file_content_base64_env}" | base64 -d)"

    echo "${contents}" > "${tmp_app_dir}/${file_name}"
done

if [ ! "$(ls -A "${tmp_app_dir}" 2>/dev/null)" ]; then
    echo "⚠️  Files not found. (maybe the FILE_CONTENT_*_BASE64 env variables are not set)" 1>&2
    rm -rf "${tmp_app_dir}"

    exit 1
fi

contents=$(kubectl kustomize "${tmp_app_dir}" 2>/dev/null \
    || (create_kustomization_file "${tmp_app_dir}" && kubectl kustomize "${tmp_app_dir}"))

rm -rf "${tmp_app_dir}"

if [ "${output_file}" != "" ]; then
    output_folder=$(dirname "${output_file}")
    [ "${cleanup_output_folder}" == 1 ] && rm -rf "${output_folder}"
    mkdir -p "${output_folder}"
    echo "${contents}" > "${output_file}"
else
    echo "${contents}"
fi
